#!/usr/bin/env python3
"""
Test script for the Advanced Multilingual Summarizer API
Run this to test all API endpoints
"""

import requests
import json
import time
from typing import Dict, Any

class APITester:
    def __init__(self, base_url: str = "http://localhost:5000"):
        self.base_url = base_url
        self.session = requests.Session()
        self.session.headers.update({'Content-Type': 'application/json'})
    
    def test_health_check(self) -> bool:
        """Test health check endpoint"""
        print("ЁЯФН Testing health check...")
        try:
            response = self.session.get(f"{self.base_url}/api/health")
            if response.status_code == 200:
                data = response.json()
                print(f"тЬЕ Health check passed: {data['message']}")
                print(f"   Supported languages: {len(data['supported_languages'])}")
                return True
            else:
                print(f"тЭМ Health check failed: {response.status_code}")
                return False
        except Exception as e:
            print(f"тЭМ Health check error: {e}")
            return False
    
    def test_language_detection(self) -> bool:
        """Test language detection endpoint"""
        print("\nЁЯФН Testing language detection...")
        
        test_texts = [
            ("рдпрд╣ рдПрдХ рд╣рд┐рдВрджреА рд╡рд╛рдХреНрдп рд╣реИред", "hi"),
            ("This is an English sentence.", "en"),
            ("ржПржЯрж┐ ржПржХржЯрж┐ ржмрж╛ржВрж▓рж╛ ржмрж╛ржХрзНржпред", "bn"),
            ("роЗродрпБ роТро░рпБ родрооро┐ро┤рпН ро╡ро╛роХрпНроХро┐ропроорпН.", "ta"),
            ("р░Зр░жр░┐ р░Тр░Х р░др▒Жр░▓р▒Бр░Чр▒Б р░╡р░╛р░Хр▒Нр░пр░В.", "te")
        ]
        
        success_count = 0
        for text, expected_lang in test_texts:
            try:
                response = self.session.post(
                    f"{self.base_url}/api/detect-language",
                    json={"text": text}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    detected = data['detected_language']
                    print(f"тЬЕ Text: '{text[:30]}...' -> Detected: {detected}")
                    success_count += 1
                else:
                    print(f"тЭМ Detection failed for: {text[:30]}...")
            except Exception as e:
                print(f"тЭМ Detection error: {e}")
        
        print(f"   Language detection: {success_count}/{len(test_texts)} successful")
        return success_count == len(test_texts)
    
    def test_text_stats(self) -> bool:
        """Test text statistics endpoint"""
        print("\nЁЯФН Testing text statistics...")
        
        sample_text = """
        рднрд╛рд░рдд рдПрдХ рд╡рд┐рд╡рд┐рдзрддрд╛рдУрдВ рд╕реЗ рднрд░рд╛ рджреЗрд╢ рд╣реИред рдпрд╣рд╛рдБ рдЕрдиреЗрдХ рднрд╛рд╖рд╛рдПрдБ рдмреЛрд▓реА рдЬрд╛рддреА рд╣реИрдВред
        рд╣рд┐рдВрджреА рдпрд╣рд╛рдБ рдХреА рд░рд╛рдЬрднрд╛рд╖рд╛ рд╣реИред рднрд╛рд░рдд рдХреА рд╕рдВрд╕реНрдХреГрддрд┐ рдмрд╣реБрдд рд╕рдореГрджреНрдз рд╣реИред
        рдпрд╣рд╛рдБ рдХреЗ рд▓реЛрдЧ рдЕрддрд┐рдерд┐ рджреЗрд╡реЛ рднрд╡ рдореЗрдВ рд╡рд┐рд╢реНрд╡рд╛рд╕ рдХрд░рддреЗ рд╣реИрдВред
        """
        
        try:
            response = self.session.post(
                f"{self.base_url}/api/text-stats",
                json={"text": sample_text}
            )
            
            if response.status_code == 200:
                data = response.json()
                stats = data['stats']
                print(f"тЬЕ Text statistics calculated:")
                print(f"   Words: {stats['words']}")
                print(f"   Sentences: {stats['sentences']}")
                print(f"   Characters: {stats['characters']}")
                print(f"   Reading time: {stats['reading_time']} minutes")
                print(f"   Language: {data['language']}")
                print(f"   Keywords: {', '.join(data['keywords'][:5])}")
                return True
            else:
                print(f"тЭМ Text stats failed: {response.status_code}")
                return False
        except Exception as e:
            print(f"тЭМ Text stats error: {e}")
            return False
    
    def test_summarization(self) -> bool:
        """Test text summarization endpoint"""
        print("\nЁЯФН Testing text summarization...")
        
        long_text = """
        рднрд╛рд░рдд рджреБрдирд┐рдпрд╛ рдХрд╛ рд╕рдмрд╕реЗ рдмрдбрд╝рд╛ рд▓реЛрдХрддрдВрддреНрд░ рд╣реИред рдпрд╣ рджрдХреНрд╖рд┐рдг рдПрд╢рд┐рдпрд╛ рдореЗрдВ рд╕реНрдерд┐рдд рд╣реИ рдФрд░ рдЗрд╕рдХреА рдЬрдирд╕рдВрдЦреНрдпрд╛ 1.4 рдЕрд░рдм рд╕реЗ рдЕрдзрд┐рдХ рд╣реИред
        рднрд╛рд░рдд рдореЗрдВ 28 рд░рд╛рдЬреНрдп рдФрд░ 8 рдХреЗрдВрджреНрд░ рд╢рд╛рд╕рд┐рдд рдкреНрд░рджреЗрд╢ рд╣реИрдВред рдпрд╣рд╛рдБ рдХреА рд░рд╛рдЬрдзрд╛рдиреА рдирдИ рджрд┐рд▓реНрд▓реА рд╣реИред
        рднрд╛рд░рдд рдХреА рдЕрд░реНрдерд╡реНрдпрд╡рд╕реНрдерд╛ рджреБрдирд┐рдпрд╛ рдХреА рдкрд╛рдВрдЪрд╡реАрдВ рд╕рдмрд╕реЗ рдмрдбрд╝реА рдЕрд░реНрдерд╡реНрдпрд╡рд╕реНрдерд╛ рд╣реИред рдпрд╣ рдХреГрд╖рд┐, рдЙрджреНрдпреЛрдЧ рдФрд░ рд╕реЗрд╡рд╛ рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рдордЬрдмреВрдд рд╣реИред
        рднрд╛рд░рдд рдореЗрдВ рд╡рд┐рд╡рд┐рдз рд╕рдВрд╕реНрдХреГрддрд┐рдпрд╛рдБ, рднрд╛рд╖рд╛рдПрдБ рдФрд░ рдзрд░реНрдо рдкрд╛рдП рдЬрд╛рддреЗ рд╣реИрдВред рдпрд╣рд╛рдБ 22 рдЖрдзрд┐рдХрд╛рд░рд┐рдХ рднрд╛рд╖рд╛рдПрдБ рд╣реИрдВред
        рднрд╛рд░рдд рдХрд╛ рдЗрддрд┐рд╣рд╛рд╕ рдмрд╣реБрдд рдкреБрд░рд╛рдирд╛ рд╣реИред рдпрд╣ рд╕рд┐рдВрдзреБ рдШрд╛рдЯреА рд╕рднреНрдпрддрд╛ рдХрд╛ рдШрд░ рдерд╛ред
        рдЖрдЬ рднрд╛рд░рдд рддрдХрдиреАрдХ рдФрд░ рдирд╡рд╛рдЪрд╛рд░ рдХреЗ рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рддреЗрдЬреА рд╕реЗ рдЖрдЧреЗ рдмрдврд╝ рд░рд╣рд╛ рд╣реИред
        рднрд╛рд░рдд рдХреЗ рдкреНрд░рдореБрдЦ рд╢рд╣рд░реЛрдВ рдореЗрдВ рдореБрдВрдмрдИ, рджрд┐рд▓реНрд▓реА, рдмреИрдВрдЧрд▓реЛрд░, рдХреЛрд▓рдХрд╛рддрд╛ рдФрд░ рдЪреЗрдиреНрдирдИ рд╢рд╛рдорд┐рд▓ рд╣реИрдВред
        рдпрд╣рд╛рдБ рдХреА рд╢рд┐рдХреНрд╖рд╛ рдкреНрд░рдгрд╛рд▓реА рдореЗрдВ IIT рдФрд░ IIM рдЬреИрд╕реЗ рдкреНрд░рддрд┐рд╖реНрдард┐рдд рд╕рдВрд╕реНрдерд╛рди рд╣реИрдВред
        """
        
        test_options = [
            {"length": "short", "language": "hi"},
            {"length": "medium", "language": "hi"},
            {"length": "long", "language": "hi"}
        ]
        
        success_count = 0
        for options in test_options:
            try:
                response = self.session.post(
                    f"{self.base_url}/api/summarize",
                    json={"text": long_text, "options": options}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"тЬЕ {options['length'].title()} summary generated:")
                    print(f"   Original words: {data['original_stats']['words']}")
                    print(f"   Summary words: {data['summary_stats']['words']}")
                    print(f"   Compression: {data['compression_ratio']:.2%}")
                    print(f"   Confidence: {data['confidence']:.2%}")
                    print(f"   Keywords: {', '.join(data['keywords'][:3])}")
                    print(f"   Summary: {data['summary'][:100]}...")
                    success_count += 1
                else:
                    print(f"тЭМ {options['length']} summary failed: {response.status_code}")
            except Exception as e:
                print(f"тЭМ Summarization error: {e}")
        
        print(f"   Summarization: {success_count}/{len(test_options)} successful")
        return success_count == len(test_options)
    
    def test_keyword_extraction(self) -> bool:
        """Test keyword extraction endpoint"""
        print("\nЁЯФН Testing keyword extraction...")
        
        sample_text = """
        рдЖрд░реНрдЯрд┐рдлрд┐рд╢рд┐рдпрд▓ рдЗрдВрдЯреЗрд▓рд┐рдЬреЗрдВрд╕ рдЖрдЬ рдХреЗ рдпреБрдЧ рдХреА рд╕рдмрд╕реЗ рдорд╣рддреНрд╡рдкреВрд░реНрдг рддрдХрдиреАрдХ рд╣реИред
        рдорд╢реАрди рд▓рд░реНрдирд┐рдВрдЧ рдФрд░ рдбреАрдк рд▓рд░реНрдирд┐рдВрдЧ AI рдХреЗ рдореБрдЦреНрдп рдШрдЯрдХ рд╣реИрдВред
        рднрд╛рд░рдд рдореЗрдВ AI рдХрд╛ рдЙрдкрдпреЛрдЧ рд╕реНрд╡рд╛рд╕реНрдереНрдп, рд╢рд┐рдХреНрд╖рд╛ рдФрд░ рдХреГрд╖рд┐ рдореЗрдВ рд╣реЛ рд░рд╣рд╛ рд╣реИред
        """
        
        try:
            response = self.session.post(
                f"{self.base_url}/api/keywords",
                json={
                    "text": sample_text,
                    "language": "hi",
                    "num_keywords": 8
                }
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"тЬЕ Keywords extracted:")
                print(f"   Language: {data['language']}")
                print(f"   Count: {data['count']}")
                print(f"   Keywords: {', '.join(data['keywords'])}")
                return True
            else:
                print(f"тЭМ Keyword extraction failed: {response.status_code}")
                return False
        except Exception as e:
            print(f"тЭМ Keyword extraction error: {e}")
            return False
    
    def test_batch_summarization(self) -> bool:
        """Test batch summarization endpoint"""
        print("\nЁЯФН Testing batch summarization...")
        
        batch_texts = [
            "рднрд╛рд░рдд рдПрдХ рдорд╣рд╛рди рджреЗрд╢ рд╣реИред рдпрд╣рд╛рдБ рдХреА рд╕рдВрд╕реНрдХреГрддрд┐ рдмрд╣реБрдд рд╕рдореГрджреНрдз рд╣реИред рдпрд╣рд╛рдБ рдЕрдиреЗрдХ рднрд╛рд╖рд╛рдПрдБ рдмреЛрд▓реА рдЬрд╛рддреА рд╣реИрдВред",
            "рддрдХрдиреАрдХ рдЖрдЬ рдХреЗ рдпреБрдЧ рдореЗрдВ рдмрд╣реБрдд рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИред рдЖрд░реНрдЯрд┐рдлрд┐рд╢рд┐рдпрд▓ рдЗрдВрдЯреЗрд▓рд┐рдЬреЗрдВрд╕ рдХрд╛ рдЙрдкрдпреЛрдЧ рдмрдврд╝ рд░рд╣рд╛ рд╣реИред",
            "рд╢рд┐рдХреНрд╖рд╛ рд╣рд░ рд╡реНрдпрдХреНрддрд┐ рдХрд╛ рдореМрд▓рд┐рдХ рдЕрдзрд┐рдХрд╛рд░ рд╣реИред рднрд╛рд░рдд рдореЗрдВ рд╢рд┐рдХреНрд╖рд╛ рдкреНрд░рдгрд╛рд▓реА рдореЗрдВ рд╕реБрдзрд╛рд░ рд╣реЛ рд░рд╣рд╛ рд╣реИред"
        ]
        
        try:
            response = self.session.post(
                f"{self.base_url}/api/batch-summarize",
                json={
                    "texts": batch_texts,
                    "options": {"length": "short", "language": "hi"}
                }
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"тЬЕ Batch summarization completed:")
                print(f"   Total processed: {data['total_processed']}")
                
                for i, result in enumerate(data['results']):
                    if 'error' not in result:
                        print(f"   Text {i+1}: {result['summary_stats']['words']} words -> {result['summary'][:50]}...")
                    else:
                        print(f"   Text {i+1}: Error - {result['error']}")
                
                return True
            else:
                print(f"тЭМ Batch summarization failed: {response.status_code}")
                return False
        except Exception as e:
            print(f"тЭМ Batch summarization error: {e}")
            return False
    
    def test_supported_languages(self) -> bool:
        """Test supported languages endpoint"""
        print("\nЁЯФН Testing supported languages...")
        
        try:
            response = self.session.get(f"{self.base_url}/api/languages")
            
            if response.status_code == 200:
                data = response.json()
                languages = data['languages']
                print(f"тЬЕ Supported languages retrieved:")
                print(f"   Total languages: {len(languages)}")
                
                for lang in languages[:5]:  # Show first 5
                    print(f"   {lang['code']}: {lang['name']} ({lang['script']})")
                
                if len(languages) > 5:
                    print(f"   ... and {len(languages) - 5} more")
                
                return True
            else:
                print(f"тЭМ Languages endpoint failed: {response.status_code}")
                return False
        except Exception as e:
            print(f"тЭМ Languages endpoint error: {e}")
            return False
    
    def run_all_tests(self) -> Dict[str, bool]:
        """Run all API tests"""
        print("ЁЯЪА Starting API Tests for Advanced Multilingual Summarizer")
        print("=" * 60)
        
        tests = {
            "Health Check": self.test_health_check,
            "Language Detection": self.test_language_detection,
            "Text Statistics": self.test_text_stats,
            "Summarization": self.test_summarization,
            "Keyword Extraction": self.test_keyword_extraction,
            "Batch Summarization": self.test_batch_summarization,
            "Supported Languages": self.test_supported_languages
        }
        
        results = {}
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests.items():
            try:
                result = test_func()
                results[test_name] = result
                if result:
                    passed += 1
            except Exception as e:
                print(f"тЭМ {test_name} failed with exception: {e}")
                results[test_name] = False
        
        print("\n" + "=" * 60)
        print("ЁЯУК Test Results Summary:")
        print(f"   Passed: {passed}/{total}")
        print(f"   Success Rate: {passed/total:.1%}")
        
        for test_name, result in results.items():
            status = "тЬЕ PASS" if result else "тЭМ FAIL"
            print(f"   {test_name}: {status}")
        
        if passed == total:
            print("\nЁЯОЙ All tests passed! API is working correctly.")
        else:
            print(f"\nтЪая╕П  {total - passed} test(s) failed. Please check the API server.")
        
        return results

def main():
    """Main function to run API tests"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Test the Advanced Multilingual Summarizer API")
    parser.add_argument("--url", default="http://localhost:5000", help="API base URL")
    parser.add_argument("--test", help="Run specific test (health, language, stats, summarize, keywords, batch, languages)")
    
    args = parser.parse_args()
    
    tester = APITester(args.url)
    
    if args.test:
        test_methods = {
            "health": tester.test_health_check,
            "language": tester.test_language_detection,
            "stats": tester.test_text_stats,
            "summarize": tester.test_summarization,
            "keywords": tester.test_keyword_extraction,
            "batch": tester.test_batch_summarization,
            "languages": tester.test_supported_languages
        }
        
        if args.test in test_methods:
            print(f"Running {args.test} test...")
            result = test_methods[args.test]()
            print(f"Test result: {'PASS' if result else 'FAIL'}")
        else:
            print(f"Unknown test: {args.test}")
            print(f"Available tests: {', '.join(test_methods.keys())}")
    else:
        tester.run_all_tests()

if __name__ == "__main__":
    main()